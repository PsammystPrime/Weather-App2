/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Console App/weatherConsole.js":
/*!*******************************************!*\
  !*** ./src/Console App/weatherConsole.js ***!
  \*******************************************/
/***/ (() => {

eval("async function getAppropriateWeatherGif(weatherCondition) {\r\n    // const userInput = imageSearcherInput.value;\r\n    try {\r\n        const weatherGifResponse = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=cdV83dbgRL2VFc2iNoBozLAQFezGJQY6&q=${weatherCondition}&limit=25&offset=0&rating=g&lang=en&bundle=messaging_non_clips`,\r\n            { mode: 'cors'});\r\n        const weatherGifResponseData = await weatherGifResponse.json();\r\n        if (weatherGifResponseData.data && weatherGifResponseData.data.length > 0) {\r\n            // let imagePath = weatherGifResponseData.data[0].images.original.url;\r\n            // imageViewer.src = imagePath;\r\n            // imageViewer.style.display = 'inline-block';\r\n            // console.log(weatherGifResponseData);\r\n            return weatherGifResponseData.data[0].images.original.url;\r\n        } else throw new Error(\"Gif not found!\")\r\n    } catch(error) {\r\n        console.log(error);\r\n        alert(error);\r\n    }\r\n}\r\n\r\n// getAppropriateWeatherGif('sunny');\r\n\r\nasync function getWeatherData(location) {\r\n    try {\r\n        const weatherResponse = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}?unitGroup=us&key=VCS46D95CZEECUCCK4GBF554A&contentType=json`, \r\n            { mode: 'cors'});\r\n\r\n        const weatherData = await weatherResponse.json();\r\n        if (weatherData) console.log(\"Data available\");\r\n        const weatherGif = await getAppropriateWeatherGif(weatherData.days[0].conditions);\r\n        if (weatherGif ) weatherData.days[0].icon = weatherGif;\r\n\r\n        return weatherData;\r\n    } catch(error) {\r\n        console.log(error);\r\n        alert(error);\r\n    }\r\n}\r\n\r\nfunction createWeatherObject(weatherData) {\r\n    \r\n    // console.log(\"called from weather Obj\", weatherData);\r\n\r\n    let temperature = weatherData.days[0].temp;\r\n    let weatherCondition = weatherData.days[0].conditions;\r\n    let WeatherDescription = weatherData.days[0].description;\r\n    let weatherIcon = weatherData.days[0].icon;\r\n    let forecast = weatherData.description;\r\n    let humidity = weatherData.days[0].humidity;\r\n    let latitude = weatherData.latitude;\r\n    let longitude = weatherData.longitude;\r\n    let resolvedLocationName = weatherData.resolvedAddress;\r\n\r\n    return { \r\n        temperature,\r\n        weatherCondition,\r\n        WeatherDescription,\r\n        weatherIcon,\r\n        forecast,\r\n        humidity,\r\n        latitude,\r\n        longitude,\r\n        resolvedLocationName,\r\n    };\r\n}\r\n\r\nconst weatherSearches = [];\r\n\r\ngetWeatherData('houston').then(data => createWeatherObject(data)).then(data => {\r\n    for (let dataItem in data) {\r\n        console.log(dataItem, \": \",data[dataItem]);\r\n    }\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQ29uc29sZSBBcHAvd2VhdGhlckNvbnNvbGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0Esa0lBQWtJLGlCQUFpQjtBQUNuSixjQUFjLGFBQWE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1JQUFtSSxTQUFTO0FBQzVJLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RldnN0YXJ0YnVpbGRpbmcvLi9zcmMvQ29uc29sZSBBcHAvd2VhdGhlckNvbnNvbGUuanM/ZTdlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJhc3luYyBmdW5jdGlvbiBnZXRBcHByb3ByaWF0ZVdlYXRoZXJHaWYod2VhdGhlckNvbmRpdGlvbikge1xyXG4gICAgLy8gY29uc3QgdXNlcklucHV0ID0gaW1hZ2VTZWFyY2hlcklucHV0LnZhbHVlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB3ZWF0aGVyR2lmUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkuZ2lwaHkuY29tL3YxL2dpZnMvc2VhcmNoP2FwaV9rZXk9Y2RWODNkYmdSTDJWRmMyaU5vQm96TEFRRmV6R0pRWTYmcT0ke3dlYXRoZXJDb25kaXRpb259JmxpbWl0PTI1Jm9mZnNldD0wJnJhdGluZz1nJmxhbmc9ZW4mYnVuZGxlPW1lc3NhZ2luZ19ub25fY2xpcHNgLFxyXG4gICAgICAgICAgICB7IG1vZGU6ICdjb3JzJ30pO1xyXG4gICAgICAgIGNvbnN0IHdlYXRoZXJHaWZSZXNwb25zZURhdGEgPSBhd2FpdCB3ZWF0aGVyR2lmUmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIGlmICh3ZWF0aGVyR2lmUmVzcG9uc2VEYXRhLmRhdGEgJiYgd2VhdGhlckdpZlJlc3BvbnNlRGF0YS5kYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gbGV0IGltYWdlUGF0aCA9IHdlYXRoZXJHaWZSZXNwb25zZURhdGEuZGF0YVswXS5pbWFnZXMub3JpZ2luYWwudXJsO1xyXG4gICAgICAgICAgICAvLyBpbWFnZVZpZXdlci5zcmMgPSBpbWFnZVBhdGg7XHJcbiAgICAgICAgICAgIC8vIGltYWdlVmlld2VyLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cod2VhdGhlckdpZlJlc3BvbnNlRGF0YSk7XHJcbiAgICAgICAgICAgIHJldHVybiB3ZWF0aGVyR2lmUmVzcG9uc2VEYXRhLmRhdGFbMF0uaW1hZ2VzLm9yaWdpbmFsLnVybDtcclxuICAgICAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiR2lmIG5vdCBmb3VuZCFcIilcclxuICAgIH0gY2F0Y2goZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgYWxlcnQoZXJyb3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBnZXRBcHByb3ByaWF0ZVdlYXRoZXJHaWYoJ3N1bm55Jyk7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRXZWF0aGVyRGF0YShsb2NhdGlvbikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB3ZWF0aGVyUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly93ZWF0aGVyLnZpc3VhbGNyb3NzaW5nLmNvbS9WaXN1YWxDcm9zc2luZ1dlYlNlcnZpY2VzL3Jlc3Qvc2VydmljZXMvdGltZWxpbmUvJHtsb2NhdGlvbn0/dW5pdEdyb3VwPXVzJmtleT1WQ1M0NkQ5NUNaRUVDVUNDSzRHQkY1NTRBJmNvbnRlbnRUeXBlPWpzb25gLCBcclxuICAgICAgICAgICAgeyBtb2RlOiAnY29ycyd9KTtcclxuXHJcbiAgICAgICAgY29uc3Qgd2VhdGhlckRhdGEgPSBhd2FpdCB3ZWF0aGVyUmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIGlmICh3ZWF0aGVyRGF0YSkgY29uc29sZS5sb2coXCJEYXRhIGF2YWlsYWJsZVwiKTtcclxuICAgICAgICBjb25zdCB3ZWF0aGVyR2lmID0gYXdhaXQgZ2V0QXBwcm9wcmlhdGVXZWF0aGVyR2lmKHdlYXRoZXJEYXRhLmRheXNbMF0uY29uZGl0aW9ucyk7XHJcbiAgICAgICAgaWYgKHdlYXRoZXJHaWYgKSB3ZWF0aGVyRGF0YS5kYXlzWzBdLmljb24gPSB3ZWF0aGVyR2lmO1xyXG5cclxuICAgICAgICByZXR1cm4gd2VhdGhlckRhdGE7XHJcbiAgICB9IGNhdGNoKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIGFsZXJ0KGVycm9yKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlV2VhdGhlck9iamVjdCh3ZWF0aGVyRGF0YSkge1xyXG4gICAgXHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImNhbGxlZCBmcm9tIHdlYXRoZXIgT2JqXCIsIHdlYXRoZXJEYXRhKTtcclxuXHJcbiAgICBsZXQgdGVtcGVyYXR1cmUgPSB3ZWF0aGVyRGF0YS5kYXlzWzBdLnRlbXA7XHJcbiAgICBsZXQgd2VhdGhlckNvbmRpdGlvbiA9IHdlYXRoZXJEYXRhLmRheXNbMF0uY29uZGl0aW9ucztcclxuICAgIGxldCBXZWF0aGVyRGVzY3JpcHRpb24gPSB3ZWF0aGVyRGF0YS5kYXlzWzBdLmRlc2NyaXB0aW9uO1xyXG4gICAgbGV0IHdlYXRoZXJJY29uID0gd2VhdGhlckRhdGEuZGF5c1swXS5pY29uO1xyXG4gICAgbGV0IGZvcmVjYXN0ID0gd2VhdGhlckRhdGEuZGVzY3JpcHRpb247XHJcbiAgICBsZXQgaHVtaWRpdHkgPSB3ZWF0aGVyRGF0YS5kYXlzWzBdLmh1bWlkaXR5O1xyXG4gICAgbGV0IGxhdGl0dWRlID0gd2VhdGhlckRhdGEubGF0aXR1ZGU7XHJcbiAgICBsZXQgbG9uZ2l0dWRlID0gd2VhdGhlckRhdGEubG9uZ2l0dWRlO1xyXG4gICAgbGV0IHJlc29sdmVkTG9jYXRpb25OYW1lID0gd2VhdGhlckRhdGEucmVzb2x2ZWRBZGRyZXNzO1xyXG5cclxuICAgIHJldHVybiB7IFxyXG4gICAgICAgIHRlbXBlcmF0dXJlLFxyXG4gICAgICAgIHdlYXRoZXJDb25kaXRpb24sXHJcbiAgICAgICAgV2VhdGhlckRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHdlYXRoZXJJY29uLFxyXG4gICAgICAgIGZvcmVjYXN0LFxyXG4gICAgICAgIGh1bWlkaXR5LFxyXG4gICAgICAgIGxhdGl0dWRlLFxyXG4gICAgICAgIGxvbmdpdHVkZSxcclxuICAgICAgICByZXNvbHZlZExvY2F0aW9uTmFtZSxcclxuICAgIH07XHJcbn1cclxuXHJcbmNvbnN0IHdlYXRoZXJTZWFyY2hlcyA9IFtdO1xyXG5cclxuZ2V0V2VhdGhlckRhdGEoJ2hvdXN0b24nKS50aGVuKGRhdGEgPT4gY3JlYXRlV2VhdGhlck9iamVjdChkYXRhKSkudGhlbihkYXRhID0+IHtcclxuICAgIGZvciAobGV0IGRhdGFJdGVtIGluIGRhdGEpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhSXRlbSwgXCI6IFwiLGRhdGFbZGF0YUl0ZW1dKTtcclxuICAgIH1cclxufSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Console App/weatherConsole.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/Console App/weatherConsole.js"]();
/******/ 	
/******/ })()
;